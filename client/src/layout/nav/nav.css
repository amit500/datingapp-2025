.list {
  color: red;
}
.p-3 {
    padding: calc(var(--spacing) * 3) /* 0.75rem = 12px */;
}
.w-full {
    width: 100%;
}
.fixed {
    position: fixed;
}
.top-0 {
    top: calc(var(--spacing) * 0) /* 0rem = 0px */;
}
.z-50 {
    z-index: 50;
}
.bg-gradient-to-r {
    --tw-gradient-position: to right in oklab;
    background-image: linear-gradient(var(--tw-gradient-stops));
}
.from-primary {
    --tw-gradient-from: var(--color-primary) /* var(--color-primary) */;
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
}
@property --tw-gradient-position {
    syntax: "*";
    inherits: false;
}
@property --tw-gradient-from {
    syntax: "<color>";
    inherits: false;
    initial-value: #0000;
}
@property --tw-gradient-via {
    syntax: "<color>";
    inherits: false;
    initial-value: #0000;
}
@property --tw-gradient-to {
    syntax: "<color>";
    inherits: false;
    initial-value: #0000;
}
@property --tw-gradient-stops {
    syntax: "*";
    inherits: false;
}
@property --tw-gradient-via-stops {
    syntax: "*";
    inherits: false;
}
@property --tw-gradient-from-position {
    syntax: "<length-percentage>";
    inherits: false;
    initial-value: 0%;
}
@property --tw-gradient-via-position {
    syntax: "<length-percentage>";
    inherits: false;
    initial-value: 50%;
}
@property --tw-gradient-to-position {
    syntax: "<length-percentage>";
    inherits: false;
    initial-value: 100%;
}
.to-black {
    --tw-gradient-to: var(--color-black) /* #000 = #000000 */;
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
}
@property --tw-gradient-position {
    syntax: "*";
    inherits: false;
}
@property --tw-gradient-from {
    syntax: "<color>";
    inherits: false;
    initial-value: #0000;
}
@property --tw-gradient-via {
    syntax: "<color>";
    inherits: false;
    initial-value: #0000;
}
@property --tw-gradient-to {
    syntax: "<color>";
    inherits: false;
    initial-value: #0000;
}
@property --tw-gradient-stops {
    syntax: "*";
    inherits: false;
}
@property --tw-gradient-via-stops {
    syntax: "*";
    inherits: false;
}
@property --tw-gradient-from-position {
    syntax: "<length-percentage>";
    inherits: false;
    initial-value: 0%;
}
@property --tw-gradient-via-position {
    syntax: "<length-percentage>";
    inherits: false;
    initial-value: 50%;
}
@property --tw-gradient-to-position {
    syntax: "<length-percentage>";
    inherits: false;
    initial-value: 100%;
}
.text-white {
    color: var(--color-white) /* #fff = #ffffff */;
}
.flex {
    display: flex;
}
.align-middle {
    vertical-align: middle;
}
.items-center {
    align-items: center;
}
.px-10 {
    padding-inline: calc(var(--spacing) * 10) /* 2.5rem = 40px */;
}
.mx-auto {
    margin-inline: auto;
}
.text-white {
    color: var(--color-white) /* #fff = #ffffff */;
}
.gap-3 {
    gap: calc(var(--spacing) * 3) /* 0.75rem = 12px */;
}
.max-h-16 {
    max-height: calc(var(--spacing) * 16) /* 4rem = 64px */;
}
.text-white {
    color: var(--color-white) /* #fff = #ffffff */;
}
.border-r-white {
    border-right-color: var(--color-white) /* #fff = #ffffff */;
}
.border-r-2 {
    border-right-style: var(--tw-border-style);
    border-right-width: 2px;
}
@property --tw-border-style {
    syntax: "*";
    inherits: false;
    initial-value: solid;
}
.pr-6 {
    padding-right: calc(var(--spacing) * 6) /* 1.5rem = 24px */;
}
.size-6 {
    width: calc(var(--spacing) * 6) /* 1.5rem = 24px */;
    height: calc(var(--spacing) * 6) /* 1.5rem = 24px */;
}
.w-8 {
    width: calc(var(--spacing) * 8) /* 2rem = 32px */;
}
.h-8 {
    height: calc(var(--spacing) * 8) /* 2rem = 32px */;
}
.rounded-full {
    border-radius: calc(9999px);
} 